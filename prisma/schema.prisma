// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  admin         Boolean?
  emailVerified DateTime?
  firstName     String?
  lastName      String?
  image         String?
  accounts      Account[]
  sessions      Session[]

  updatedAt       DateTime?      @updatedAt
  createdAt       DateTime?      @default(now())
  responses       Response[]
  createdProblems DailyProblem[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Response {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  problem      DailyProblem @relation(fields: [dailyProblemId], references: [id])
  user         User         @relation(fields: [userId], references: [id])
  userSolution String
  started      DateTime
  ended        DateTime 

  dailyProblemId String @db.ObjectId
  userId         String @db.ObjectId
}

model DailyProblem {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  author             User     @relation(fields: [userId], references: [id])
  date               DateTime
  body               String
  solution           String
  solutionReleased   Boolean
  explanation        String
  explanationImageUrl String?
  

  Response Response[]
  userId   String     @db.ObjectId
}
